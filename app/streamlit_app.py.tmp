import os
import pathlib
import streamlit as st
import pandas as pd
import psycopg

# Basic page config
st.set_page_config(
    page_title="Literature OS",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Configure Streamlit paths for HF Space
PROJECT_ROOT = pathlib.Path(__file__).resolve().parents[1]
if os.environ.get("HOME", "/") in ("/", "", None):
    os.environ["HOME"] = str(PROJECT_ROOT)
os.environ.setdefault("XDG_CONFIG_HOME", os.environ["HOME"])
os.makedirs(os.path.join(os.environ["HOME"], ".streamlit"), exist_ok=True)

# Database connection
@st.cache_resource
def get_db():
    """Get database connection"""
    try:
        return psycopg.connect(
            os.environ["DB_READER_DSN"],
            application_name="literature-os-streamlit"
        )
    except Exception as e:
        st.error(f"Database connection failed: {str(e)}")
        raise

@st.cache_data(ttl=300)
def get_metadata(_conn):
    """Load tags and years from database"""
    try:
        with _conn.cursor() as cur:
            # Get tags
            cur.execute("SELECT DISTINCT tag FROM tags ORDER BY tag")
            tags = [r[0] for r in cur.fetchall() if r[0]]
            
            # Get years
            cur.execute("""
                SELECT DISTINCT year 
                FROM papers 
                WHERE year IS NOT NULL AND year BETWEEN 1900 AND 2100
                ORDER BY year DESC
            """)
            years = [r[0] for r in cur.fetchall() if r[0]]
            
        return tags or [], years or list(range(2010, 2026))
    except Exception as e:
        st.error(f"Failed to load metadata: {str(e)}")
        return [], list(range(2010, 2026))

@st.cache_data(ttl=300)
def get_papers(_conn, tags=None, year_start=None, year_end=None, search=None):
    """Query papers with filters"""
    try:
        sql = """
            SELECT 
                id,
                COALESCE(title, '(No title)') as title,
                COALESCE(journal, '(No journal)') as journal,
                year,
                COALESCE(doi, '') as doi,
                COALESCE(citation_count, 0) as citation_count
            FROM papers
            WHERE 1=1
        """
        params = []
        
        if tags:
            sql += " AND id IN (SELECT paper_id FROM tags WHERE tag = ANY(%s))"
            params.append([str(t) for t in tags])
            
        if year_start is not None and year_end is not None:
            sql += " AND year BETWEEN %s AND %s"
            params.extend([int(year_start), int(year_end)])
            
        if search:
            sql += " AND (title ILIKE %s OR abstract ILIKE %s)"
            search = f"%{search.strip()}%"
            params.extend([search, search])
            
        sql += " ORDER BY year DESC NULLS LAST, citation_count DESC NULLS LAST LIMIT 200"
        
        with _conn.cursor() as cur:
            cur.execute(sql, params)
            rows = cur.fetchall()
            
        df = pd.DataFrame(
            rows,
            columns=["ID", "Title", "Journal", "Year", "DOI", "Citations"]
        )
        
        df["Year"] = pd.to_numeric(df["Year"], errors="coerce")
        df["Citations"] = pd.to_numeric(df["Citations"], errors="coerce").fillna(0).astype(int)
        
        return df
        
    except Exception as e:
        st.error(f"Query failed: {str(e)}")
        return pd.DataFrame(columns=["ID", "Title", "Journal", "Year", "DOI", "Citations"])

# Main app
st.title("Literature OS")
st.caption("Last updated via GitHub â†’ HF sync âœ…")

try:
    # Connect to database
    db = get_db()
    
    # Load filter options
    tags, years = get_metadata(db)
    
    # Filter section
    st.subheader("ðŸ“‹ Filter Papers")
    
    col1, col2 = st.columns(2)
    
    with col1:
        search = st.text_input(
            "Search titles & abstracts",
            help="Enter keywords to search in paper titles and abstracts"
        )
        
        year_range = st.slider(
            "Year range",
            min_value=2010,
            max_value=2025,
            value=(2015, 2025),
            help="Filter papers by publication year"
        )
    
    with col2:
        selected_tags = st.multiselect(
            "Filter by tags",
            options=sorted(tags),
            help="Select tags to filter papers"
        )
    
    # Query and display papers
    papers = get_papers(
        db,
        tags=selected_tags,
        year_start=year_range[0],
        year_end=year_range[1],
        search=search
    )
    
    st.subheader(f"ðŸ“š Results ({len(papers)} papers)")
    
    if papers.empty:
        st.info("No papers found matching your criteria.")
    else:
        papers['DOI'] = papers['DOI'].apply(lambda x: f'[{x}](https://doi.org/{x})' if x else '')
        
        st.dataframe(
            papers,
            use_container_width=True,
            column_config={
                "DOI": st.column_config.LinkColumn("DOI"),
                "Citations": st.column_config.NumberColumn("Citations", format="%d"),
                "Year": st.column_config.NumberColumn("Year", format="%d")
            },
            hide_index=True
        )
        
        csv = papers.to_csv(index=False).encode('utf-8')
        st.download_button(
            "ðŸ“¥ Download as CSV",
            csv,
            "papers.csv",
            "text/csv",
            key='download-csv'
        )

except Exception as e:
    st.error(f"Application error: {str(e)}")
